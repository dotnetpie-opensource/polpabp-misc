@using Microsoft.Extensions.Configuration
@using Volo.Abp.AspNetCore.Mvc.AntiForgery
@using Volo.Abp.AspNetCore.Mvc.UI.Components.LayoutHook
@using Volo.Abp.AspNetCore.Mvc.UI.Layout
@using PolpAbp.AspNetCore.Mvc.UI.Bundling
@using PolpAbp.AspNetCore.Mvc.UI.Themes.Visitor.Components.MainNavbar
@using PolpAbp.AspNetCore.Mvc.UI.Themes.Visitor.Components.PageAlerts
@using Volo.Abp.AspNetCore.Mvc.UI.Theming
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetScripts
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetStyles
@using Volo.Abp.Localization
@using Volo.Abp.Ui.Branding
@using Volo.Abp.Ui.LayoutHooks

@inject IBrandingProvider BrandingProvider
@inject IPageLayout PageLayout
@inject IConfiguration Configuration

@{
    Layout = null;
    var containerClass = ViewBag.FluidLayout == true ? "container-fluid" : "container"; //TODO: Better and type-safe options

    var pageTitle = ViewBag.Title == null ? BrandingProvider.AppName : ViewBag.Title; //TODO: Discard to get from Title

    if (PageLayout.Content.Title != null)
    {
        if (!string.IsNullOrWhiteSpace(pageTitle))
        {
            pageTitle = " | " + pageTitle;
        }

        pageTitle = PageLayout.Content.Title + pageTitle;
    }

    var rtl = CultureHelper.IsRtl ? "rtl" : string.Empty;

    var favicon = Configuration["PolpAbp:WebUi:Favicon"];
    if (!string.IsNullOrEmpty(favicon))
    {
        favicon = Url.IsLocalUrl(favicon) ? Url.Content(favicon.EnsureStartsWith('~')) : favicon;
    }

    var faviconPng16 = Configuration["PolpAbp:WebUi:FaviconPng16"];
    if (!string.IsNullOrEmpty(faviconPng16))
    {
        faviconPng16 = Url.IsLocalUrl(faviconPng16) ? Url.Content(faviconPng16.EnsureStartsWith('~')) : faviconPng16;
    }

    var faviconPng32 = Configuration["PolpAbp:WebUi:FaviconPng32"];
    if (!string.IsNullOrEmpty(faviconPng32))
    {
        faviconPng32 = Url.IsLocalUrl(faviconPng32) ? Url.Content(faviconPng32.EnsureStartsWith('~')) : faviconPng32;
    }

    var vectorIcon = Configuration["PolpAbp:WebUi:VectorFavicon"];
    if (!string.IsNullOrEmpty(vectorIcon))
    {
        vectorIcon = Url.IsLocalUrl(vectorIcon) ? Url.Content(vectorIcon.EnsureStartsWith('~')) : vectorIcon;
    }

    var appleTouchIcon = Configuration["PolpAbp:WebUi:AppleTouchIcon"];
    if (!string.IsNullOrEmpty(appleTouchIcon))
    {
        appleTouchIcon = Url.IsLocalUrl(appleTouchIcon) ? Url.Content(appleTouchIcon.EnsureStartsWith('~')) : appleTouchIcon;
    }

    var statusBarColor = Configuration["PolpAbp:WebUi:StatusBarColor"] ?? "black";

    var applicationName = Configuration["PolpAbp:WebUi:ApplicationName"];
}

<!DOCTYPE html>

<html lang="@CultureInfo.CurrentCulture.Name" dir="@rtl">
<head>
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.First, StandardLayouts.Application)

    <meta charset="utf-8">
    <title>@pageTitle</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

    <!-- favicon -->
    @if (!string.IsNullOrEmpty(favicon))
    {
        <link rel="icon" type="image/x-icon" href="@favicon">
    }
    @if (!string.IsNullOrEmpty(faviconPng16))
    {
        <link rel="icon" type="image/png" sizes="16x16" href="@faviconPng16">
    }
    @if (!string.IsNullOrEmpty(faviconPng32))
    {
        <link rel="icon" type="image/png" sizes="32x32" href="@faviconPng32">
    }
    @if (!string.IsNullOrEmpty(vectorIcon))
    {
        <link rel="icon" href="@vectorIcon" type="image/svg+xml">
    }
    @if (!string.IsNullOrEmpty(appleTouchIcon))
    {
        <link rel="apple-touch-icon" sizes="180x180" href="@appleTouchIcon">
    }

    <!-- add to homescreen for ios -->
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />

    <meta name="msapplication-TileColor" content="@statusBarColor">

    @if (!string.IsNullOrEmpty(applicationName))
    {
        <meta name="application-name" content="@applicationName" />
    }

    @if (ViewBag.MetaTitle != null)
    {
        <meta name="title" content="@ViewBag.MetaTitle" />
    }
    <!-- Keywords are becoming legacy -->
    @if (ViewBag.Keywords != null)
    {
        <meta name="keywords" content="@(ViewBag.Keywords as string)" />
    }
    @if (ViewBag.Description != null)
    {
        <meta name="description" content="@(ViewBag.Description as string)" />
    }

    <abp-style-bundle name="@VisitorThemeBundles.Styles.Global" />

    @await Component.InvokeAsync(typeof(WidgetStylesViewComponent))

    @await RenderSectionAsync("styles", false)

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.Last, StandardLayouts.Application)

    <script type="text/javascript">
        const environments = {
            passwordInputSelector: "#password-wrapper"
        };
        const onPageLoadQueue = [];
    </script>

</head>
<body class="abp-application-layout bg-light @rtl">
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Body.First, StandardLayouts.Application)

    @(await Component.InvokeAsync<MainNavbarViewComponent>())

    <div class="@containerClass">
        @(await Component.InvokeAsync<PageAlertsViewComponent>())
        <div id="AbpContentToolbar">
            <div class="text-right mb-2">
                @RenderSection("content_toolbar", false)
            </div>
        </div>
        @await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.First, StandardLayouts.Application)
        @RenderBody()
        @await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.Last, StandardLayouts.Application)
    </div>

    <abp-script-bundle name="@VisitorThemeBundles.Scripts.Global" />

    <script src="~/Abp/ApplicationConfigurationScript"></script>
    <script src="~/Abp/ServiceProxyScript"></script>

    @await Component.InvokeAsync(typeof(WidgetScriptsViewComponent))

    @await RenderSectionAsync("scripts", false)

    @await RenderSectionAsync("docReady", false)

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Body.Last, StandardLayouts.Application)

    <script type="text/javascript">
        window.onload = function () {
            for (var i = 0; i < onPageLoadQueue.length; i++) {
                onPageLoadQueue[i]();
            }
        };
    </script>

</body>
</html>
