@using Volo.Abp.AspNetCore.Mvc.AntiForgery
@using Volo.Abp.AspNetCore.Mvc.UI.Components.LayoutHook
@using Volo.Abp.AspNetCore.Mvc.UI.Layout
@using PolpAbp.AspNetCore.Mvc.UI.Theme.Bootslander.Bundling
@using PolpAbp.AspNetCore.Mvc.UI.Theme.Bootslander.Themes.Bootslander.Components.PageAlerts
@using Volo.Abp.AspNetCore.Mvc.UI.Theming
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetScripts
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetStyles
@using Volo.Abp.Localization
@using Volo.Abp.Ui.Branding
@using Microsoft.Extensions.Configuration
@using Volo.Abp.Ui.LayoutHooks

@inject IBrandingProvider BrandingProvider
@inject IPageLayout PageLayout
@inject IConfiguration Configuration
@{
    Layout = null;
    var containerClass = ViewBag.FluidLayout == true ? "container-fluid" : "container"; //TODO: Better and type-safe options

    var pageTitle = ViewBag.Title == null ? BrandingProvider.AppName : ViewBag.Title; //TODO: Discard to get from Title

    if (PageLayout.Content.Title != null)
    {
        if (!string.IsNullOrWhiteSpace(pageTitle))
        {
            pageTitle = " | " + pageTitle;
        }

        pageTitle = PageLayout.Content.Title + pageTitle;
    }

    var rtl = CultureHelper.IsRtl ? "rtl" : string.Empty;

    var favicon = Configuration["PolpAbp:WebUi:Favicon"];
    favicon = favicon ?? "~/favicon.ico";
    favicon = Url.IsLocalUrl(favicon) ? Url.Content(favicon.EnsureStartsWith('~')) : favicon;

    var vectorIcon = Configuration["PolpAbp:WebUi:VectorFavicon"];
    if (!string.IsNullOrEmpty(vectorIcon))
    {
        vectorIcon = Url.IsLocalUrl(vectorIcon) ? Url.Content(vectorIcon.EnsureStartsWith('~')) : vectorIcon;
    }

    var appleTouchIcon = Configuration["PolpAbp:WebUi:AppleTouchIcon"];
    if (!string.IsNullOrEmpty(appleTouchIcon))
    {
        appleTouchIcon = Url.IsLocalUrl(appleTouchIcon) ? Url.Content(appleTouchIcon.EnsureStartsWith('~')) : appleTouchIcon;
    }

    var applicationName = Configuration["PolpAbp:WebUi:ApplicationName"];
}

<!DOCTYPE html>

<html lang="@CultureInfo.CurrentCulture.Name" dir="@rtl">
<head>
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.First, StandardLayouts.Empty)

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Montserrat:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">

    <link rel="icon" href="@favicon">
    @if (!string.IsNullOrEmpty(vectorIcon))
    {
        <link rel="icon" href="@vectorIcon" type="image/svg+xml">
    }
    @if (!string.IsNullOrEmpty(appleTouchIcon))
    {
        <link rel="apple-touch-icon" href="@appleTouchIcon">
    }

    <title>@pageTitle</title>

    @if (ViewBag.MetaTitle != null)
    {
        <meta name="title" content="@ViewBag.MetaTitle" />
    }
    @if (ViewBag.Description != null)
    {
        <meta name="description" content="@ViewBag.Description" />
    }
    @if (ViewBag.Keywords != null)
    {
        <meta name="keywords" content="@ViewBag.Keywords" />
    }

    <!-- favicon -->

    <abp-style-bundle name="@BootslanderThemeBundles.Styles.Global" />

    @await RenderSectionAsync("styles", false)

    <script type="text/javascript">const environments = {
        };</script>

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.Last, StandardLayouts.Empty)

</head>
<body class="abp-empty-layout @rtl">
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Body.First, StandardLayouts.Empty)

    @RenderBody()

    <abp-script-bundle name="@BootslanderThemeBundles.Scripts.Global" />

    @await RenderSectionAsync("scripts", false)

    @await RenderSectionAsync("docReady", false)

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Body.Last, StandardLayouts.Empty)
</body>
</html>
